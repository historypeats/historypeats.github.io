<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on historypeats</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on historypeats</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015</copyright>
    <lastBuildDate>Mon, 08 Jun 2015 13:55:57 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fun with Google Scripts</title>
      <link>http://localhost:1313/post/fun-with-google-scripts/</link>
      <pubDate>Mon, 08 Jun 2015 13:55:57 -0400</pubDate>
      
      <guid>http://localhost:1313/post/fun-with-google-scripts/</guid>
      <description>&lt;p&gt;I was having drinks with a colleague of mine and we discussed the use of Google App Scripts to help improve UI/UX of Google products. The conversation originally started off talking about ways to improve Gmail UX with scripts. Since I&amp;rsquo;ve never used App Scripts before, I thought it would be a good idea to do the Quickstart tutorial and tinker around with it a bit. For those of you who don&amp;rsquo;t know much about Apps Scripts, it&amp;rsquo;s basically a Google &amp;ldquo;javascript-esque&amp;rdquo; scripting language that allows you add functionality to almost all of the Google Apps: Sheets, Drive, Calendar, Contacts, etc.&lt;/p&gt;

&lt;p&gt;If anyone knows me, they&amp;rsquo;ll know that I love abusing system functionality &amp;ndash; especially in regards to persistence, rootkits, (spy/mal/etc.)ware, and C&amp;amp;C. So I set off to tried to see what I could develop with App Scripts in regards to gaining and/or maintaining persistent access to a user&amp;rsquo;s account. This post shares some of my research.&lt;/p&gt;

&lt;p&gt;Note: There are no exploits or vulnerabilities discussed in this post. The current attack vector discussed would be if you have physical access to someone&amp;rsquo;s account and the use of Bound Scripts (more on this later). There may be other methods of installing the script, but this research was more focused towards what can be done using App Scripts.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Some Background &lt;/h3&gt;
Just to give you guys a little more background on Google App Scripts, there are three types of scripts: Standalone, Bound, and Web Apps/Gadgets. &lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Standalone - These scripts are basically scripts you&amp;rsquo;ll see in your Google Drive. To run then, you need to open them up and press the &lt;strong&gt;Run&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Bound - These scripts are bound to a single document (Doc, Sheet, etc.) and can execute in a few different ways. See the reference below about Triggers. &lt;/li&gt;
&lt;li&gt;Web App - These scripts are a lot like Standalone scripts except that they act as a web app. Once created and installed, you will be given a URL to the web app.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Standalone&lt;/h3&gt;
In order for these types of scripts to be run, the user must open up the script doc and run it. Since this seemed like the least likeliest to succeed in an attack, I did not further investigate possible scenarios. This doesn&amp;rsquo;t mean that there are zero use-cases for them in an attack. I just couldn&amp;rsquo;t thinking of a way. If anyone figures out a more creative way to abuse these types of scripts, I&amp;rsquo;d certainly love to hear more about it. I can be contacted via Twitter.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Bound (Malware Documents) &lt;/h3&gt;
The first item on my list to check was to see if it was possible to send another user malicious scripts via sharing a Google Doc, Sheet, etc. with another user. I basically wanted to see if it was possible to replicate what can be done with Microsoft Office documents and Macros. After reading documentation and tinkering around with a &amp;ldquo;backdoored&amp;rdquo; Doc, I quickly came to the conclusion that this attack vector had serious limitations and can be only be used in very niche scenarios. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attack Vector&lt;/strong&gt;&lt;br /&gt;
What&amp;rsquo;s interesting with Bound scripts is that if one user binds a script to a document and shares the document with another user, that user will also execute the script but under the context of their identity without permission. What this means is that you can share a malicious document with another user and have it run without that user knowing it&amp;rsquo;s execution. Sounds great right? Unfortunately, Google has done a great job with limiting the permissions for bounded scripts.&lt;/p&gt;

&lt;p&gt;Example Code Snippet:
&lt;br /&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt; hi&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>